#include <avr/io.h>
#include <util/delay.h>  // Include delay.h for _delay_ms()

// Define the delay time (500ms = 0.5 second)
#define DELAY_TIME 500

int main() {
    // Initialize I/O
    DDRB = 0xFF;    // Set PORTB as output for LEDs
    PORTB = 0xFF;   // Initial state of LEDs is off (active low)

    DDRA &= ~((1 << PA1) | (1 << PA0));  // Set PA1 and PA0 as input for buttons S1 and S0
    PORTA |= (1 << PA1) | (1 << PA0);    // Enable pull-up resistors for buttons S1 and S0 (active low)

    // Main loop
    while (1) {
        // Check for button S0 press (S0 is connected to PA0)
        if (!(PINA & (1 << PA0))) {  // If S0 is pressed (active low)
            // Wait until S0 is released to avoid repeated triggers
            while (!(PINA & (1 << PA0))) {
                // Busy wait until S0 is released
            }

            // Blink 10 times
            for (uint8_t i = 0; i < 10; i++) {
                PORTB = 0x55;  // Turn on Pattern 1 (01010101)
                _delay_ms(DELAY_TIME);  // 500ms delay

                // Check if S1 is pressed during blinking to stop
                if (!(PINA & (1 << PA1))) {
                    PORTB = 0xFF;  // Turn off LEDs
                    break;         // Exit the blinking loop
                }

                PORTB = 0xAA;  // Turn on Pattern 2 (10101010)
                _delay_ms(DELAY_TIME);  // 500ms delay

                // Check if S1 is pressed during blinking to stop
                if (!(PINA & (1 << PA1))) {
                    PORTB = 0xFF;  // Turn off LEDs
                    break;         // Exit the blinking loop
                }
            }

            PORTB = 0xFF;  // Turn off LEDs (active low)
        }

        // Check for button S1 press to stop blinking (S1 is connected to PA1)
        if (!(PINA & (1 << PA1))) {  // If S1 is pressed (active low)
            PORTB = 0xFF;            // Turn off all LEDs (active low)

            // Wait until S1 is released
            while (!(PINA & (1 << PA1))) {
                // Busy wait until S1 is released
            }
        }
    }

    return 0;
}