#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>  // Include delay.h for small delays

#define F_CPU 16000000UL  // Define the crystal frequency
#define BLINKS 10         // Number of blinks (10 full cycles)

// Global variables
volatile uint8_t pattern = 0xAA;    // Start with pattern 10101010 (0xAA)
volatile uint8_t blink_flag = 0;    // Flag to trigger LED pattern change
volatile uint8_t blink_count = 0;   // Counter for the number of blinks

// Function to initialize Timer 0
void timer0_init() {
    TCCR0 = (1 << WGM01);           // Set Timer 0 in CTC mode
    TCCR0 |= (1 << CS02) | (1 << CS00);  // Set prescaler to 1024
    OCR0 = 77;                      // Set Compare Match value for 0.5s delay
    TIMSK |= (1 << OCIE0);          // Enable Timer 0 Compare Match Interrupt
}

// ISR for Timer 0 compare match
ISR(TIMER0_COMP_vect) {
    blink_flag = 1;  // Set flag to indicate it's time to change the pattern
}

// Main function
int main() {
    // Initialize I/O
    DDRB = 0xFF;    // Set PORTB as output for LEDs
    PORTB = 0xFF;   // Initial state of LEDs is off (active low)

    DDRA &= ~((1 << PA1) | (1 << PA0));  // Set PA1 and PA0 as input for buttons S1 and S0
    PORTA |= (1 << PA1) | (1 << PA0);    // Enable pull-up resistors for buttons S1 and S0 (active low)

    // Initialize Timer 0
    timer0_init();

    // Enable global interrupts
    sei();

    // Main loop
    while (1) {
        // Check for button S0 press (S0 is connected to PA0)
        if (!(PINA & (1 << PA0))) {  // If S0 is pressed (active low)
            while (!(PINA & (1 << PA0))) {
                _delay_ms(50);  // Busy wait with delay (debounce handling)
            }

            // Start blinking 10 times
            for (blink_count = 0; blink_count < BLINKS * 2; blink_count++) { // 20 changes for 10 blinks
                while (!blink_flag) {
                    _delay_ms(50);  // Small delay in the busy wait loop
                }

                blink_flag = 0;  // Reset the flag

                // Toggle between Pattern 1 (0xAA) and Pattern 2 (0x55)
                if (pattern == 0xAA) {
                    pattern = 0x55;  // Switch to Pattern 2 (01010101)
                } else {
                    pattern = 0xAA;  // Switch back to Pattern 1 (10101010)
                }

                PORTB = pattern;  // Output the current pattern to the LEDs

                // Check if S1 is pressed to stop the blinking
                if (!(PINA & (1 << PA1))) {
                    PORTB = 0xFF;  // Turn off LEDs
                    break;         // Exit the loop early if S1 is pressed
                }
            }

            PORTB = 0xFF;  // Turn off all LEDs after 10 blinks
        }

        // Check for button S1 press to stop blinking (S1 is connected to PA1)
        if (!(PINA & (1 << PA1))) {  // If S1 is pressed (active low)
            PORTB = 0xFF;            // Turn off all LEDs (active low)

            // Wait until S1 is released
            while (!(PINA & (1 << PA1))) {
                _delay_ms(50);  // Busy wait with delay (debounce handling)
            }
        }
    }

    return 0;
}